/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class App {
    public static void main(String[] args) {
        String path = "app/src/main/resources/recentquotes.json";
        if (System.getProperty("user.dir").endsWith("p"))
            path = "../" + path;


        final String URL = "http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en";
        try{
            HttpURLConnection connection = connect(URL, "key", "POST");
            if(connection.getResponseCode() == 200){
                System.out.println("\u001B[35mAPI Random Quote");
                BufferedReader reader = readResponse(connection);
                String json = getJson(reader);
                Quote quote = getJsonObject(json);
                System.out.println("\u001B[0m"+quote);
            }else{
                System.out.println("Error, status code is: " + connection.getResponseCode());
            }
        }catch (IOException e){
            // random quote from local json file (recentquotes.json).
            LQuote[] quotes = readJson(path);
            if (args.length > 0){
                String quoteAuthor = makeAuthorName(args);
                String quote = getQuote(quotes, quoteAuthor);
                if(quote!= null)
                    System.out.println("\u001B[32mQuote by "+ quoteAuthor + " is: " + quote);
                else
                    System.out.println("\u001B[31mThere is no such quoteAuthor '" + quoteAuthor + "'");
            }
            int randomIndex = randomQuoteIndex(0, quotes.length);
            System.out.println();
            System.out.println("\u001B[35mLocal Random Quote");
            System.out.println("\u001B[0m"+quotes[randomIndex]);
        }
    }

    public static int randomQuoteIndex(int min, int max){
        return (int) (Math.random() * max) + min;
    }

    public static LQuote[] readJson(String path){
        Gson gson = new Gson();
        LQuote[] quotes = null;
        try{
            FileReader reader = new FileReader(path);
            quotes = gson.fromJson(reader, LQuote[].class);
        }catch(IOException e){
            System.out.println(e.getMessage());
        }
        return quotes;
    }
    public static boolean isFound(LQuote[] quotes, LQuote quote){
        for(LQuote q: quotes){
            if(q.getAuthor().equals(quote.getAuthor()))
                return true;
        }
        return false;
    }

    public static String getQuote(LQuote[] quotes,String author){
        for (LQuote quote: quotes){
            if (quote.getAuthor().equals(author))
                return quote.getText();
        }
        return null;
    }

    public static String makeAuthorName(String[] args){
        String name = "";
        for(String word: args){
            name+=word +" ";
        }
        return name.substring(0, name.length()-1);
    }

    public static BufferedReader readResponse(HttpURLConnection connection) throws IOException{
        InputStream inputStream = connection.getInputStream();
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        return new BufferedReader(inputStreamReader);
    }

    public static HttpURLConnection connect(String apiUrl,String apiKey, String method) throws IOException{
        URL url = new URL(apiUrl);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod(method);
        con.setRequestProperty("Content-Type", "application/json");
//        con.setRequestProperty("Authorization",apiKey);
        con.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.29 Safari/537.36");

        return con;
    }

    public static String getJson(BufferedReader reader) throws IOException{
        StringBuilder builder = new StringBuilder();
        String line;
        while((line = reader.readLine())!= null){
            builder.append(line);
        }
        return builder.toString();
    }

    public static Quote getJsonObject(String response){
        Gson gson = new Gson();
        return gson.fromJson(response, Quote.class);
    }

}
